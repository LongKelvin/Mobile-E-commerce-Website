




















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `MobileShopConnectionString`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=KELVIN-LONG;Initial Catalog=MobileShopOnline;Integrated Security=True`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using PetaPoco;

namespace MobileShopConnectionString
{

	public partial class MobileShopConnectionStringDB : Database
	{
		public MobileShopConnectionStringDB() 
			: base("MobileShopConnectionString")
		{
			CommonConstruct();
		}

		public MobileShopConnectionStringDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			MobileShopConnectionStringDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static MobileShopConnectionStringDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new MobileShopConnectionStringDB();
        }

		[ThreadStatic] static MobileShopConnectionStringDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static MobileShopConnectionStringDB repo { get { return MobileShopConnectionStringDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	



    

	[TableName("dbo.Images")]



	[PrimaryKey("ID", AutoIncrement=false)]


	[ExplicitColumns]

    public partial class Image : MobileShopConnectionStringDB.Record<Image>  
    {



		[Column] public string ProductImage { get; set; }





		[Column] public string Image1 { get; set; }





		[Column] public string Image2 { get; set; }





		[Column] public string Image3 { get; set; }





		[Column] public string Image4 { get; set; }





		[Column] public string Image5 { get; set; }





		[Column] public string Image6 { get; set; }





		[Column] public string Image7 { get; set; }





		[Column] public string ID { get; set; }



	}

    

	[TableName("dbo.Manufacturer")]



	[PrimaryKey("ManufacturerID", AutoIncrement=false)]


	[ExplicitColumns]

    public partial class Manufacturer : MobileShopConnectionStringDB.Record<Manufacturer>  
    {



		[Column] public string ManufacturerID { get; set; }





		[Column] public string ManufacturerName { get; set; }



	}

    

	[TableName("dbo.Products")]



	[PrimaryKey("ProductID", AutoIncrement=false)]


	[ExplicitColumns]

    public partial class Product : MobileShopConnectionStringDB.Record<Product>  
    {



		[Column] public string ProductID { get; set; }





		[Column] public string ProductTypeID { get; set; }





		[Column] public string ManufacturerID { get; set; }





		[Column] public string ProductName { get; set; }





		[Column] public string ProductConfig { get; set; }





		[Column] public bool? ProductStatus { get; set; }




		[DisplayFormat(DataFormatString = "{0:C0}")]
		[Column] public decimal? ProductPrice { get; set; }





		[Column] public int? ProductSellRecord { get; set; }





		[Column] public int? ProductViewed { get; set; }





		[Column] public string ProductImageID { get; set; }



	}

    

	[TableName("dbo.ProductType")]



	[PrimaryKey("ProductTypeID", AutoIncrement=false)]


	[ExplicitColumns]

    public partial class ProductType : MobileShopConnectionStringDB.Record<ProductType>  
    {



		[Column] public string ProductTypeID { get; set; }





		[Column] public string ProductTypeName { get; set; }



	}

    

	[TableName("dbo.sysdiagrams")]



	[PrimaryKey("diagram_id")]




	[ExplicitColumns]

    public partial class sysdiagram : MobileShopConnectionStringDB.Record<sysdiagram>  
    {



		[Column] public string name { get; set; }





		[Column] public int principal_id { get; set; }





		[Column] public int diagram_id { get; set; }





		[Column] public int? version { get; set; }





		[Column] public byte[] definition { get; set; }



	}


}
